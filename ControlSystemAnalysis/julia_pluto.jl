### A Pluto.jl notebook ###
# v0.12.16

using Markdown
using InteractiveUtils

# ╔═╡ fafae38e-e852-11ea-1208-732b4744e4c2
md"_Σημειώσεις Μαθήματος, version 1_, 
Γ. Παπαλάμπρου
"

# ╔═╡ 33cb7766-3939-11eb-09ed-ad3e7a31198a
md"# Βασικές Αρχές Προγραμματισμού"

# ╔═╡ d97be6c4-3938-11eb-0892-0524edde92a6
md"## Παραδόσεις Μαθήματος 2020"

# ╔═╡ 3146e02a-3939-11eb-0055-3377e102e336
md"### Γ. Παπαλάμπρου
Επίκουρος Καθηγητής ΕΜΠ, email: 
george.papalambrou@lme.ntua.gr"

# ╔═╡ 71a751a6-3939-11eb-124d-8f629e6d23f9
md"## Η γλώσσα Julia
"

# ╔═╡ 7ee00bc2-3939-11eb-059a-814f68065b54
md"### Εισαγωγή στην γλώσσα Julia"
 

# ╔═╡ f664aad6-3939-11eb-2fa1-670a15c7322e
md"### _H γλώσσα Julia_

H Julia έκανε την εμφάνισή της το 2012 με την μορφή ανοικού κώδικα (open source), ως αποτέλεσμα της συνεργασίας  των Jeff Bezanson, Stefan Karpinski, Viral Shah και Alan Edelman (MIT).

Αρχικά θεωρήθηκε από τους σχεδιαστές ως μια επιστημονική γλώσσα, αρκετά γρήγορη για να καλύψει την ανάγκη της μοντελοποίησης σε μια διαδραστική γλώσσα και στη συνέχεια να αναπτυχθεί σε μια μεταγλωττισμένη γλώσσα, όπως η C ή η Fortran. 

Εκείνη την εποχή, οι κύριες επιστημονικές γλώσσες ήταν εμπορικές (proprietary), όπως το MATLAB και η Mathematica, και ήταν σχετικά αργές.

"


# ╔═╡ 3abd494a-393a-11eb-3fa6-ed0b3664e35e
md"### _Οι πραγματικές ανάγκες_

Η Julia έδωσε λύση στο **πρόβλημα των 2 γλωσσών**, όπως περιγράφεται παρακάτω.


Στην αρχική φάση της υλοποίησης (Prototyping) χρειάζεται μια υψηλού επιπέδου, εύχρηστη και ευέλικτη γλώσσα που επιτρέπει στον προγραμματιστή να επικεντρωθεί στο ίδιο το πρόβλημα και όχι σε λεπτομέρειες χαμηλού επιπέδου της γλώσσας και του υπολογισμού.

Προς τούτο γίνεται χρήση interpreted γλωσσών όπως MATLAB, Python ή R (για στατιστική).

Ο πραγματικός υπολογισμός ενός προβλήματος χρειάζεται μέγιστη απόδοση (=ταχύτητα).
Έτσι ένας συντελεστής 10 στο χρόνο υπολογισμού κάνει σημαντική διαφορά (σκεφτείτε μια μέρα έναντι δέκα ημερών), οπότε η έκδοση παραγωγής πρέπει συχνά να (ξανά) γράφεται σε C ή FORTRAN ή ακόμα και 
assembly code.


Η γνώση και στα δύο επίπεδα γλώσσών δεν είναι προφανής: η σύνταξη κώδικα υψηλού επιπέδου σε MATLAB, R ή Python για τη δημιουργία πρωτοτύπων από τη μία πλευρά και σύνταξη κώδικα που κάνει το ίδιο πράγμα στην C, για την πραγματική εκτέλεση, ιδίως για επιστήμονες.


"

# ╔═╡ 72030016-393a-11eb-31cf-d706d31d2850
md"### _Η λύση δόθηκε από την γλώσσα Julia_


Η Julia σχεδιάστηκε ρητά για να γεφυρώσει αυτό το κενό των **2 γλωσσών**.

Δίνει τη δυνατότητα να γράφετε κώδικα υψηλής απόδοσης που χρησιμοποιεί CPU και πόρους μνήμης όσο πιο αποτελεσματικά μπορεί να γίνει στην C, αλλά δουλεύοντας με **καθαρή-pure** Julia  μειώνει την ανάγκη για γλώσσα χαμηλού επιπέδου. 

Με αυτόν τον τρόπο, μπορείτε να εργαστείτε επαναληπτικά χρησιμοποιώντας ένα απλό μοντέλο προγραμματισμού από το πρωτότυπο του προβλήματος έως την απόδοση σχεδόν τύπου-γλώσσας C.  

Οι προγραμματιστές της Julia έχουν αποδείξει ότι η εργασία σε ένα περιβάλλον που έχει τις δυνατότητες έκφρασης καθώς και την καθαρή ταχύτητα είναι δυνατή χρησιμοποιώντας τις πρόσφατες εξελίξεις στις τεχνολογίες μεταγλωττιστών Virtual Level Just in Time (LLVM JIT) χαμηλού επιπέδου.

"

# ╔═╡ 4805bf78-393b-11eb-2ec9-879ec0e3c41a
md"### _Βασικά χαρακτηριστικά της γλώσσας Julia_

Η Julia  είναι  γλώσσα ανοιχτού κώδικα και δωρεάν με άδεια MIT.

Έχει σχεδιαστεί για να είναι μια εύκολη στη χρήση και εκμάθηση, κομψή, καθαρή και δυναμική, διαδραστική γλώσσα, μειώνοντας τον χρόνο ανάπτυξης. 
 Για το σκοπό αυτό, η Julia μοιάζει σχεδόν με τον ψευδοκώδικα, για μια μαθηματική έκφραση.
 Παρέχει την υπολογιστική ισχύ και ταχύτητα χωρίς να χρειάζεται να εγκαταλείψετε το περιβάλλον της Julia.
 Είναι δυνατός Μεταπρογραμματισμός και μακρο δυνατότητες που κληρονόμησε από τη Lisp, για να αυξήσουν την ισχύ της αφαίρεσης (abstraction).

 Επίσης, μπορεί να χρησιμοποιηθεί για γενικούς σκοπούς προγραμματισμού, όχι μόνο σε καθαρούς κλάδους υπολογιστών. 

 Έχει ενσωματωμένες και απλές στη χρήση δυνατότητες για  ταυτόχρονες και παράλληλες δυνατότητες υπολογισμών σε συστήματα multicore.
"

# ╔═╡ 4b480254-393b-11eb-1e6e-d92dc56f0bc9
md"### _Εισαγωγή στην γλώσσα Julia_

1. H Julia έχει γίνει download πάνω από 17 εκατομμύρια φορές (12/2020) και η κοινότητα της Julia έχει καταχωρίσει περισσότερα από 4.000 πακέτα για κοινή χρήση. 

1. Αυτά περιλαμβάνουν διάφορες μαθηματικές βιβλιοθήκες, εργαλεία χειρισμού δεδομένων και πακέτα για υπολογισμούς γενικού σκοπού. 

1. Εκτός από αυτά, μπορείτε εύκολα να χρησιμοποιήσετε βιβλιοθήκες από Python, C,  Fortran, C ++,  Java και R.

"

# ╔═╡ b9181256-393b-11eb-39db-17ece1ab41b0
md"### _Η ιστοσελίδα της Julia_

Η ιστοσελίδα της Julia βρίσκεται στο [_Julia.org_] (https://docs.julialang.org)
"

# ╔═╡ bbd71faa-393b-11eb-2fb4-b7a38b69acda
md"### _Εγκατάσταση Julia_

Μπορείτε να κατεβάσετε την πλατφόρμα Julia σε εκτελέσιμη (binary) μορφή από το https://julialang.org/downloads/. 

Υπάρχει για τις τρεις μεγάλες πλατφόρμες (Linux, OS X 😊 και Windows) σε μορφή 32 και 64-bit,  ως `package` ή σε μορφή `κώδικα`.
"

# ╔═╡ 7eddf1ee-393d-11eb-05e5-a954ab36e0b1
md"### _Περιβάλλον εργασίας εντολών (command line)_

Στο περιβάλλον εργασίας εντολών (command line), η γλώσσα ξεκινάει σε μορφή Read Evaluate Print Loop (`REPL`).

Ο χρήστης εργάζεται απ ευθείας με τον μεταγλωττιστή `Just in Time (JIT) compiler`.
"

# ╔═╡ c7d9025c-393e-11eb-0fb6-19256ca69ef2
md"### _Εγκατάσταση Julia_

Όταν είστε ικανοποιημένοι, μπορείτε να αντιγράψετε και να επικολλήσετε τον κώδικα σε ένα αρχείο με επέκταση .jl, όπως το my\_program.jl. 

Εναλλακτικά, μπορείτε να συνεχίσετε την εργασία σε αυτόν τον κώδικα μέσα από ένα πρόγραμμα επεξεργασίας κειμένου ή ένα IDE (Visual Studio 😊, vim 👌, Sublime-IJulia κλπ). 

Αφού εμφανιστεί το banner με το λογότυπο της Julia, θα εμφανίζεται το julia> για την εισαγωγή. 

Για να τερματίσετε την τρέχουσα λειτουργία (session) πληκτρολογήστε `CTRL + D` ή `quit()` και πατήστε ENTER.


"

# ╔═╡ c79f65d8-393e-11eb-1aad-d1cdfab146de
md"### _Πως να μάθετε την γλώσσα_

Η Julia ως περιβάλλον ανοικτού λογισμικού (open source) διαθέτει ισχυρό μηχανισμό διάδοσης και υποστήριξης στο διαδύκτιο (Julia Learn | Tutorials, https://julialang.org/learning/).

"

# ╔═╡ 4841108c-3940-11eb-1d02-d324d9aa90af
md"### _Περιβάλλον εργασίας Pluto notebook_

Ένα notebook Pluto αποτελείται από μικρά μπλοκ κώδικα Julia (κελιά) και μαζί σχηματίζουν ένα διαδραστικό σημειωματάριο. 

Όταν αλλάζετε μια μεταβλητή, το Pluto εκτελεί ξανά αυτόματα τα κελιά που αναφέρονται σε αυτήν. 
```
 Τα κελιά μπορούν ακόμη και να τοποθετηθούν με αυθαίρετη σειρά - η έξυπνη ανάλυση σύνταξης υπολογίζει τις εξαρτήσεις μεταξύ τους και φροντίζει για την εκτέλεση.

Τα κελιά μπορούν να περιέχουν αυθαίρετο κωδικό Julia και μπορείτε να χρησιμοποιήσετε εξωτερικές βιβλιοθήκες. 

 Μπορείτε επίσης να εξάγετε (export) το σημειωματάριό σας ως έγγραφα HTML και PDF και φυσικά ως αρχείο Julia.
```
Σε ένα κελί, μετά το τέλος εισαγωγής κειμένου δίνετε SHFT + Enter για να εκτελεστεί η μαθηματικλη εντολή ή μορφοποίηση.
"

# ╔═╡ 48330208-3940-11eb-353e-154188df3e4c


# ╔═╡ 47b9e9ca-3940-11eb-30e8-e1d657f90fed
md"### _Εγκατάσταση Julia_


"

# ╔═╡ ed3c19a0-393c-11eb-28c5-578fe29832e2
md"### _Βιβλιογραφία_

* Η ιστοσελίδα της Julia βρίσκεται στο [_Julia.org_] (https://docs.julialang.org)

* Documentation της Julia βρίσκεται στο [_Julia 1.5 Documentation_] (https://docs.julialang.org)

* Ivo Balbaert, Avik Sengupta, Malcolm Sherrington, Julia: High Performance Programming, Packt, 2016.

* Stephen Boyd, Lieven Vandenberghe, Introduction to Applied Linear Algebra.  Cambridge University Press, June 2018.

* Julia Pluto notebook, https://github.com/fonsp/Pluto.jl, 2020.

* Introduction to Computational Thinking, MIT, https://computationalthinking.mit.edu/Fall20/, 2020.




"

# ╔═╡ ed0d7c44-393c-11eb-0852-716dc6a5e7e2
md"""
!!! warning "Η ιστοσελίδα της Julia βρίσκεται στο "
    Keep working on it!
		"""

# ╔═╡ bbbf8cf0-3940-11eb-094b-f960fdd2a2f4


# ╔═╡ bb0e3a7c-3940-11eb-3fb8-712d692aa85c
md"### _Περιβάλλον εργασίας Pluto notebook  -  $LaTex$_


Το Pluto έχει ενσωματωμένη μηχανή κειμένου $LaTex$, οπότε αν δώσετε μέσα σε περιβάλλον μορφοποίησης **md...** εντολές LaTex όπως **$ $...$ $**, 
τότε θα εμφανιστεί  το αναμενόμενο μαθηματικό κείμενο (εδώ η τετραγωνική ρίζα κλάσματος $\sqrt{\frac{abcd}{efgh}}$).
		"

# ╔═╡ ef069f26-3944-11eb-1c9e-314a85a5c182


# ╔═╡ 9bbeb760-3944-11eb-3614-c129c0dd39b6


# ╔═╡ 9b6d2706-3944-11eb-3643-cb88ef273547


# ╔═╡ 4e448a9a-3945-11eb-33f0-c5893406cb09


# ╔═╡ 4e3920e2-3945-11eb-3421-294a28a9123b


# ╔═╡ 4de020fa-3945-11eb-074b-378e5a362e05


# ╔═╡ 4d83cef4-3945-11eb-1f20-371036b6c7e5


# ╔═╡ ba51c84c-3940-11eb-1739-efc652e949b5


# ╔═╡ ba0ed92e-3940-11eb-2d33-29e0bc3e03b1
md"""

		"""

# ╔═╡ 7308bc54-e6cd-11ea-0eab-83f7535edf25


# ╔═╡ 094e39c8-e6ce-11ea-131b-07c4a1199edf


# ╔═╡ 31a8fbf8-e6ce-11ea-2c66-4b4d02b41995


# ╔═╡ 339c2d5c-e6ce-11ea-32f9-714b3628909c
md"## Exercise 1 - _Square root by Newton's method_

Computing the square of a number is easy -- you just multiply it with itself.

But how does one compute the square root of a number?

##### Algorithm:

Given: $x$

Output: $\sqrt{x}$

1. Take a guess `a`
1. Divide `x` by `a`
1. Set a = the average of `x/a` and `a`. (The square root must be between these two numbers. Why?)
1. Repeat until `x/a` is roughly equal to `a`. Return `a` as the square root.

In general, you will never get to the point where `x/a` is _exactly_ equal to `a`. So if our algorithm keeps going until `x/a == a`, then it will get stuck.

So instead, the algorithm takes a parameter `error_margin`, which is used to decide when `x/a` and `a` are close enough to halt.
"

# ╔═╡ bccf0e88-e754-11ea-3ab8-0170c2d44628
ex_1_1 = md"""
your answer here
""" 

# you might need to wait until all other cells in this notebook have completed running. 
# scroll down the page to see what's up

# ╔═╡ e7abd366-e7a6-11ea-30d7-1b6194614d0a
if !(@isdefined ex_1_1)
	md"""Do not change the name of the variable - write you answer as `ex_1_1 = "..."`"""
end

# ╔═╡ a60a492a-e7bc-11ea-0f0b-75d81ce46a01
md"That's it for now, see you next week!"

# ╔═╡ Cell order:
# ╟─fafae38e-e852-11ea-1208-732b4744e4c2
# ╠═33cb7766-3939-11eb-09ed-ad3e7a31198a
# ╠═d97be6c4-3938-11eb-0892-0524edde92a6
# ╠═3146e02a-3939-11eb-0055-3377e102e336
# ╠═71a751a6-3939-11eb-124d-8f629e6d23f9
# ╠═7ee00bc2-3939-11eb-059a-814f68065b54
# ╠═f664aad6-3939-11eb-2fa1-670a15c7322e
# ╠═3abd494a-393a-11eb-3fa6-ed0b3664e35e
# ╠═72030016-393a-11eb-31cf-d706d31d2850
# ╠═4805bf78-393b-11eb-2ec9-879ec0e3c41a
# ╠═4b480254-393b-11eb-1e6e-d92dc56f0bc9
# ╠═b9181256-393b-11eb-39db-17ece1ab41b0
# ╠═bbd71faa-393b-11eb-2fb4-b7a38b69acda
# ╠═7eddf1ee-393d-11eb-05e5-a954ab36e0b1
# ╠═c7d9025c-393e-11eb-0fb6-19256ca69ef2
# ╠═c79f65d8-393e-11eb-1aad-d1cdfab146de
# ╠═4841108c-3940-11eb-1d02-d324d9aa90af
# ╠═48330208-3940-11eb-353e-154188df3e4c
# ╠═47b9e9ca-3940-11eb-30e8-e1d657f90fed
# ╠═ed3c19a0-393c-11eb-28c5-578fe29832e2
# ╠═ed0d7c44-393c-11eb-0852-716dc6a5e7e2
# ╠═bbbf8cf0-3940-11eb-094b-f960fdd2a2f4
# ╠═bb0e3a7c-3940-11eb-3fb8-712d692aa85c
# ╟─ef069f26-3944-11eb-1c9e-314a85a5c182
# ╠═9bbeb760-3944-11eb-3614-c129c0dd39b6
# ╠═9b6d2706-3944-11eb-3643-cb88ef273547
# ╠═4e448a9a-3945-11eb-33f0-c5893406cb09
# ╠═4e3920e2-3945-11eb-3421-294a28a9123b
# ╠═4de020fa-3945-11eb-074b-378e5a362e05
# ╠═4d83cef4-3945-11eb-1f20-371036b6c7e5
# ╠═ba51c84c-3940-11eb-1739-efc652e949b5
# ╠═ba0ed92e-3940-11eb-2d33-29e0bc3e03b1
# ╟─7308bc54-e6cd-11ea-0eab-83f7535edf25
# ╟─094e39c8-e6ce-11ea-131b-07c4a1199edf
# ╟─31a8fbf8-e6ce-11ea-2c66-4b4d02b41995
# ╠═339c2d5c-e6ce-11ea-32f9-714b3628909c
# ╠═bccf0e88-e754-11ea-3ab8-0170c2d44628
# ╟─e7abd366-e7a6-11ea-30d7-1b6194614d0a
# ╠═a60a492a-e7bc-11ea-0f0b-75d81ce46a01
