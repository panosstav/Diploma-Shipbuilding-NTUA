### A Pluto.jl notebook ###
# v0.12.21

using Markdown
using InteractiveUtils

# ╔═╡ dd9601d0-864b-11eb-2b4c-45cce01caef3
begin
	import Pkg
	using PlutoUI #Help Package for Pluto
	Pkg.add("ControlSystems")
	Pkg.add("Plots")
	using ControlSystems
	using Plots
end

# ╔═╡ e92a56e4-92b3-11eb-2d17-e1621e5f24ef
begin
	Pkg.add("Calculus")
	using Calculus
	
	z(x,y) = x*y
	
	h2 = Calculus.gradient(x ->x[1]*x[2])
	
	a1,b1 = h2([6.0, 11.0])
	
	 a1*(5)+b1*(10)-66
	
end

# ╔═╡ dcdcacba-864a-11eb-0eb4-eb798b68fa05
md"# _Εισαγωγή στον αυτόματο Έλεγχο (8090) - Ασκήσεις - Μοντελοποίηση Συστημάτων_

#### Βασίλειος Καρυστινός ΥΔ
vkar@lme.ntua.gr"

# ╔═╡ 420cc658-864c-11eb-1010-2bfca56dc9a3
md"Σε αυτό το Notebook παρουσιάζονται μερικά βασικά παραδείγματα μοντελοποίησης μηχανικών συστημάτων με χρήση της julia. Η βιβλιοθήκη που θα χρησιμοποιήσουμε είναι η [**`ControlSystems`**](https://juliacontrol.github.io/ControlSystems.jl/latest/). Αρχικά κατεβάζουμε και κάνουμε προσωρινή εγκατάσταση του μαζί με μερικά ακόμη χρήσιμα πακέτα"

# ╔═╡ f397f1da-864b-11eb-0e13-21e6cea61759
md"## Μοντελοποίηση Φυσικών Συστημάτων

Τα συστήματα ελέγχου κατά κύριο λόγω έχουν ως σκοπό να καθοδηγούν, ελέγχουν ή ρυθμίζουν φυσικά (ή και όχι) συστήματα ώστε να λειτουργούν με ένα προκαθορισμένο τρόπο. Κατά συνέπεια μας ενδιαφέρει να προσδιορίσουμε και να μοντελοποιήσουμε το ελεγχόμενο σύστημα κάτι το οποίο και αποτελεί το πρώτο βήμα κατά τον σχεδιασμό συστημάτων ελέγχου. 

Τα προς έλεγχο συστήματα μοντελοποιούνται συνήθως με χρήση διαφορικών εξισώσεων, συνήθεις ή μερικές, γραμμικές ή και όχι, οι οποίες μπορούν να μεταβάλλονται ως προς το χρόνο.  Σε αυτό το μάθημα, θα ασχοληθούμε μόνο με συστήματα τα οποία προσδιορίζονται πλήρως από **σύνηθες, γραμμικές, χρονικά μη μεταβαλλόμενες διαφορικές εξισώσεις** (Linear Time Invariant Systems - LTI). 
"

# ╔═╡ dba63aea-91f2-11eb-09e6-6d620c70d0a5
md"### Παραδείγματα μοντελοποίησης φυσικών συστημάτων
 
Τα φυσικά συστήματα για τα όποια γίνεται σχεδιασμός ελεγκτών είναι κυρίως δυο κατηγοριών α) Μηχανικά και β) Ηλεκτρικά. Ένα απλό παράδειγμα ενός μηχανικού συστήματος αποτελεί το αμορτισέρ του αυτοκινήτου: 

"

# ╔═╡ 37ebf656-91f4-11eb-38c5-af1d0a931881
md""" $(Resource(\"https://i.imgur.com/tHUtnCK.png", :width => 500))

$(Resource(\"https://i.imgur.com/w66N2dK.png", :width => 300))


"""

# ╔═╡ e948418c-91f4-11eb-041e-81fb72550a7d
md" Το παραπάνω φυσικό σύστημα μπορεί να μοντελοπιηθεί ως εξής: 

$$M_c\ddot{z} = b_c(\dot{y}-\dot{z})+k_c(y-z)$$ 
  
$$M_t\ddot{y} = b_t(\dot{x}-\dot{y})+k_t(x-y)-_c(\dot{y}-\dot{z})-k_c(y-z)$$ 

"

# ╔═╡ 23613b3a-91f5-11eb-2266-7b877c2c48d1
md" Συνήθως τα φυσικά συστήματα μπορεί να διακριτοποιηθούν σε κάποια στοιχειώδη υποσυστήματα. Ένας πίνακας με αυτά τα στοιχεία παρουσιάζεται παρακάτω: 

$(Resource(\"https://i.imgur.com/1cTuMEf.png\", :width => 800))"



# ╔═╡ 6515c050-920e-11eb-3db3-3b6622e52001
md" ### Μετασχηματισμός Laplace


Όπως έχουμε αναφέρει στο μάθημα αυτό τα συστήματα που θα εξετάσουμε αναπαρίστανται με γραμμικές διαφορικές εξισώσεις. Με χρήση μαθηματικών μεθόδων, όπως του μετασχηματισμού Laplace, επιτυγχάνονται λύσεις των εξισώσεων που περιγράφουν τη συμπεριφορά του συστήματος. Με τη χρήση μετασχηματισμού Laplace, επιτυγχάνεται η μετατροπή κοινών συναρτήσεων (ημιτονοειδών, εκθετικών, κα) σε αλγεβρικές συναρτήσεις μιγαδικής μεταβλητής. Επίσης πράξεις όπως η παραγώγιση και η ολοκλήρωση αντικαθιστώνται από αλγεβρικές πράξεις στο μιγαδικό πεδίο. Έτσι μια γραμμική ΔΕ μετασχηματίζεται σε αλγεβρική εξίσωση μίας μιγαδικής μεταβλητής. Η λύση της γραμμικής ΔΕ βρίσκεται είτε με χρήση πίνακα μετασχηματισμών Laplace είτε με ανάπτυξη σε μερικά κλάσματα. Πλεονεκτήματα χρήσης μετασχηματισμού Laplace είναι: 

  

* Χρήση γραφικών μεθόδων (διαγράμματα απόκρισης συχνότητας Bode) στην πρόβλεψη συμπεριφοράς συστήματος χωρίς τη λύση των ΔΕ του συστήματος 

* Απο τη λύση της ΔΕ προκύπτει ταυτόχρονα η συνιστώσα της μεταβατικής κατάστασης και η συνιστώσα της μόνιμης κατάστασης 

Ο μετασχηματισμός Laplace μιας συνάρτησης χρόνου f(t) ορίζεται ως: 

$$\mathscr{L}\{f(t)\} = F(s) = \int^{\infty}_{0}f(t)e^{-st}dt$$ 


Στον παρακάτω πίνακα φαίνονται ορισμένοι βασικοί μετασχηματισμοί: 

$(Resource(\"https://i.imgur.com/5gwgse8.png\", :width => 500))" 
 

# ╔═╡ 5d45bb9e-9210-11eb-3880-ab6b9252e018
md" ##### Παράδειγμα-Απλός Ταλαντωτής

Εκτελέστε τον μετασχηματισμό Laplace στον γραμμικό ταλαντωτή και προσομοιώστε την απόκρισή του σε βηματική συνάρτηση με την βοήθεια της julia, θεωρώντας μηδενικές αρχικές συνθήκες. 

$(Resource(\"https://i.imgur.com/IZUU0qs.png\", :width => 500))

Ο ταλαντωτής περιγράφεται μέσω της διαφορικής εξίσωσης:

$$m\ddot{y}+b\dot{y}+ky = f(t)$$

Λαμβάνοντας ρον μετασχηματισμό Laplace έχουμε


$$\mathscr{L}\{m\ddot{y}(t)\} = m(s^2Y(s)-sy(0)-\dot (y)(0))$$

$$\mathscr{L}\{b\dot{y}(t)\} = b(sY(s)-y(0))$$

$$\mathscr{L}\{ky(t)\} = kY(s)$$

$$\mathscr{L}\{f(t)\} = F(s)$$

Έτσι λυνοντας το παραπάνω σύστημα ως προς Y(s)/F(s) έχουμε:

$$\frac{Υ(s)}{F(s)} = \frac{1}{ms^2+bs+k}$$

η παραπάνω συνάρτηση, δηλαδή η έξοδος προς την είσοδο του συστήματος στο πεδίο της συχνότητας ονομάζεται **Συνάρτηση Μεταφοράς του Συστήματος**. 

"


# ╔═╡ dbdb0128-9213-11eb-2780-051f75280553
md"#### Εισαγωγή συναρτήσεων μεταφοράς με το ControlSystems

Για να εισάγουμε μια συνάρτηση μεταφοράς στο ControlSystems χρησιμοποιούμε την εντολή `tf(num,den,x0)`, όπου num το διάνυσμα με τους συντελεστές του αριθμητή, den το διάνυσμα με τους συντελεστές του παρανομαστή και x0 οι αρχικές συνθήκες οι οποίες αν δεν δοθούν θεωρούνται μηδενικές. Έτσι στο παράδιγμά μας έχουμε:"

# ╔═╡ 4e64316a-9214-11eb-187e-b34f6d707a69
begin
	m = 100 #[kg]
	b = 15 #[kgs-1]
	K = 15
	
	num = [1] # Σε μορφή array πάντα
	den = [m,b,K] #--->ms^2+bs+k
	
	G = tf(num,den)
end

# ╔═╡ a4606642-9214-11eb-360b-fb5b74a29dbb
md" Στην συνέχεια θέλουμε να προσομοιώσουμε την παραπάνω συνάρτηση σε βηματική είσοδο. Η βηματική είσοδος έχει τον ακόλουθο τύπο: 

$$step(t) = \left\{\begin{array}{ll} 

  0 & t< 0 \\ 

  1 & t\geq 0  

\end{array}\right.$$   

Όπως θα δούμε στα επόμενα μαθήματα η απόκριση του συστήματος σε αυτή την συνάρτηση αποτελεί μια πάρα πολύ σημαντική παράμετρο καθώς μας δίνει πολύ χρήσιμα στοιχεία για την συμπεριφορά του συστήματος.  

Στο ControlSystems δεδομένης μιας συνάρτησης μεταφοράς μπορούμε να πάρουμε την απόκριση της χρήση των εντολών: 

* `step(tf, ts)` : λαμβάνουμε την απόκριση της tf για 50 sec

* `stepplot(tf, ts)` : λαμβάνουμε τo plot της απόκριση της tf για 50 sec

"

# ╔═╡ a37c914a-9216-11eb-21c6-ed914abbbde3
y, t, x = step(G,50)

# ╔═╡ 05a511cc-9216-11eb-28a2-93db01faea32
stepplot(G,50)

# ╔═╡ fb977c5a-9216-11eb-0b0c-91bc296aeaa1
md"Εκτός από την βηματική συνάρτηση υπάρχουν και άλλες έτοιμες συναρτήσεις που χρησιμοποιούνται συχνά για την εξέταση της απόκρισης ενός συστήματος. Επίσης μπορούμε να ορίσουμε και δικές μας συναρτήσεις. Για παράδειγμα παρακάτω βλέπουμε την απόκριση του συστήματος στην κρουστική συνάρτηση και το συνημίτονο. Αυτό γίνεται χρησιμοποιώντας τις συναρτήσεις `lsim`, `impulse` και `lsimplot`, `impulseplot` " 

# ╔═╡ 5e594e8a-9218-11eb-12f0-0963260b6355
begin
	t1 = 0:0.01:100
	
	#Step
	ys1, ts01, xs1 = step(G,t1)
	
	#Impulse
	yi1, ti01, xi1 = impulse(G,t1)
	
	#Cosine
	u1 = cos.(t1)
	
	yu1, tu01, xu1 = lsim(G, u1, t1)
	
	#Plots
	
	y1 = hcat(ys1,yi1,yu1)
	plot(t1, y1, layout= (3,1), legend=false)
end

# ╔═╡ ae9d1264-9218-11eb-17f8-6d78697eea65
lsimplot(G, u1, t1)

# ╔═╡ d1fd83b0-9218-11eb-035c-89630dfe759e
md" ### Σύνθετα Συστήματα

Τα περισσότερα φυσικά συστήματα, αποτελούνται συνήθως από πλήθος υποσυστημάτων τα οποία συνδέονται μεταξύ τους και περιγράφονται από συναρτήσεις μεταφοράς. Ο τρόπος σύνδεσης αυτών των συστημάτων είναι ή σε σειρά ή παράλληλα ή με ανατροφοδότηση. Σε αυτές τις περιπτώσεις διευκολύνει η αναπαράσταση του συστήματος με **δομικά διαγράμματα**. Μερικά παραδείγματα τέτοιων διαγραμμάτων παρουσιάζονται παρακάτω: 


$(Resource(\"https://i.imgur.com/VqSlStV.png\", :width => 800))


Προκειμένου να κάνουμε προσομοιώσεις, χρειαζόμαστε μία μοναδική συνάρτηση μεταφοράς η οποία θα περιγράφει όλο το σύστημα. Αυτό γίνεται συνδυάζοντας τις συναρτήσεις μεταφοράς ακολουθώντας τους κανόνες που φαίνονται στο παρακάτω σχήμα:
:
$(Resource(\"https://i.imgur.com/z4zQrPY.png\", :width => 800))

*Παρατήρηση*: Οι παραπάνω κανόνες ουσιαστικά είναι 3 όσοι και οι τρόποι σύνδεσης των συναρτήσεων μεταφοράς. 

"


# ╔═╡ e38139be-921e-11eb-2be1-5b5447f8d2d2
md"### Συνθεση συστημάτων με χρήση του ControlSystems

Η σύνθεση των συστημάτων μπορεί να γίνει με χρήση του πακέτου ControlSystems. Όπως είδαμε, οι παραπάνω κανόνες μπορούν να αναπαρασταθούν  από 3 ισοδύναμους τρόπους σύνδεσης οι οποίοι υλοποιούνται με τις αντίστοιχες εντολές:  

* Σε σειρά - `series(G1,G2)` 

* Παράλληλα - `parallel(G1,G2)` 

* Με ανατροφοδότηση - `feedback(G1,G2)` 


"

# ╔═╡ 4321b3c8-921d-11eb-3e18-19d17e6ba24c
md" #### Παράδειγμα


$(Resource(\"https://i.imgur.com/t4Wt5uJ.png\", :width => 800))

$(Resource(\"https://i.imgur.com/NrT6bvZ.png?1\", :width => 800))

Τώρα έστω ότι: 

$$G = \frac{1}{s+1}$$

$$H1 = \frac{5}{s^2+2s+1}$$

$$H2 = \frac{s+1}{3s^2+1}$$

Βρείτε την ισοδύναμη συνάρτηση μεταφοράς με τo πακέτο ControlSystems
"

# ╔═╡ e7c6d384-921f-11eb-02b0-2133a791f95f
G1 = tf([1],[5,1])

# ╔═╡ f2332a0a-921f-11eb-1810-b517df564589
H1 = tf([5],[2,1])

# ╔═╡ ff27a670-921f-11eb-17c7-bf0b434d95ff
H2 = tf([1,1],[3,1])

# ╔═╡ 0b9adc60-9220-11eb-1033-b376bc801550
G1H2 = feedback(G1,H2) 

# ╔═╡ 5bcb6fec-9220-11eb-0dea-3bbd68ec2f75
H1_G1 = parallel(H1/G1,tf([1],[1]))

# ╔═╡ ad3924b8-92b7-11eb-0bb2-f1c81fe04faa
tf([1],[1])

# ╔═╡ 8db96056-9220-11eb-2e8e-d5ab319138e8
G1H1H2 = series(H1_G1, G1H2)

# ╔═╡ b035ae62-9220-11eb-285a-3b5b87b0fcd3
stepplot(G1H1H2,100)

# ╔═╡ d4609c6e-9204-11eb-37e1-af93a65a708d
md" ### Παράρτημα: Μη Γραμμικά Συστήματα -  Γραμμικοποίηση

Τα φυσικά συστήματα ως επί των πλείστων είναι μη-γραμμικά. Ωστόσο στις περισσότερες περιπτώσεις, η περιοχή λειτουργίας τους είναι περιορισμένη σε ένα πολύ μικρό εύρος τιμών. Έτσι εκμεταλλευόμενοι αυτό το γεγονός, τα συστήματα μπορεί να αναπαρασταθούν με γραμμικά μοντέλα τα οποία αναπτύσσονται για αυτό το σημείο λειτουργίας -ισορροπίας 

$(Resource(\"https://i.imgur.com/XGYGHjp.png\", :width => 800))

H πιο συνήθης τεχνική γραμμικοποίησης είναι η ανάπτυξη της μη γραμμικής εξίσωσης σε πολυώνυμο Taylor γύρω από το σημείο λειτουργίας, κρατώντας μόνο τους γραμμικούς όρους. Υπενθυμίζεται το ανάπτυγμα Taylor: 

$$f(x_1,x_2,..,x_n) = f(\mathbf{x_0}) +\frac{\partial f}{\partial x_1}|_{x_{1,0}}(x_1-x_{1,0})...+\frac{\partial f}{\partial x_n}|_{x_{n,0}}(x_n-x_{n,0}).$$

"

# ╔═╡ d8ad4668-9207-11eb-103a-293303d60a94
md" ##### Παράδειγμα 

Να γραμμικοποιηθεί η μη γραμμική εξίσωση $z =xy$ στην περιοχή $5 \leq x \leq 7$, $10 \leq y \leq 12$. Να υπολογιστεί το σφάλμα αν χρησιμοποιηθεί η γραμμικοποιημένη αντί η γραμμική εξίσωση κοντά στο σημείο z όταν $x =5$, $y=10$ 

**Λύση**:

Επειδή η περιοχή που μας ενδιαφέρει είναι $5 \leq x \leq 7$, $10 \leq x \leq 12$, επιλέγουμε $x_0 = 6$, $y_0 = 11$. Η γραμμική εξίσωση προκύπτει ότι είναι:


$$z-\bar{z} = a(x-\bar{x})+b(y-\bar{y})$$

όπου

$a = \frac{\partial (xy)}{\partial x}|_{x,y = \bar{x},\bar{y}} = 11$
$b = \frac{\partial (xy)}{\partial y}|_{x,y = \bar{x},\bar{y}} = 6$

Άρα:

$z = 11x+6y-66 = 55+60-66 = 49$$

Ενώ $z = xy = 50$ Άρα το σφάλμα είναι 50-49 = 1, δηλαδή 2 %

"

# ╔═╡ Cell order:
# ╟─dcdcacba-864a-11eb-0eb4-eb798b68fa05
# ╟─420cc658-864c-11eb-1010-2bfca56dc9a3
# ╠═dd9601d0-864b-11eb-2b4c-45cce01caef3
# ╟─f397f1da-864b-11eb-0e13-21e6cea61759
# ╟─dba63aea-91f2-11eb-09e6-6d620c70d0a5
# ╟─37ebf656-91f4-11eb-38c5-af1d0a931881
# ╟─e948418c-91f4-11eb-041e-81fb72550a7d
# ╟─23613b3a-91f5-11eb-2266-7b877c2c48d1
# ╟─6515c050-920e-11eb-3db3-3b6622e52001
# ╟─5d45bb9e-9210-11eb-3880-ab6b9252e018
# ╠═dbdb0128-9213-11eb-2780-051f75280553
# ╠═4e64316a-9214-11eb-187e-b34f6d707a69
# ╟─a4606642-9214-11eb-360b-fb5b74a29dbb
# ╠═a37c914a-9216-11eb-21c6-ed914abbbde3
# ╠═05a511cc-9216-11eb-28a2-93db01faea32
# ╟─fb977c5a-9216-11eb-0b0c-91bc296aeaa1
# ╠═5e594e8a-9218-11eb-12f0-0963260b6355
# ╠═ae9d1264-9218-11eb-17f8-6d78697eea65
# ╟─d1fd83b0-9218-11eb-035c-89630dfe759e
# ╟─e38139be-921e-11eb-2be1-5b5447f8d2d2
# ╟─4321b3c8-921d-11eb-3e18-19d17e6ba24c
# ╠═e7c6d384-921f-11eb-02b0-2133a791f95f
# ╠═f2332a0a-921f-11eb-1810-b517df564589
# ╠═ff27a670-921f-11eb-17c7-bf0b434d95ff
# ╠═0b9adc60-9220-11eb-1033-b376bc801550
# ╠═5bcb6fec-9220-11eb-0dea-3bbd68ec2f75
# ╠═ad3924b8-92b7-11eb-0bb2-f1c81fe04faa
# ╠═8db96056-9220-11eb-2e8e-d5ab319138e8
# ╠═b035ae62-9220-11eb-285a-3b5b87b0fcd3
# ╟─d4609c6e-9204-11eb-37e1-af93a65a708d
# ╟─d8ad4668-9207-11eb-103a-293303d60a94
# ╠═e92a56e4-92b3-11eb-2d17-e1621e5f24ef
